name: CI / CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  APP_NAME: news-scraper
  IMAGE_NAME: ghcr.io/${{ github.repository }}/news-scraper

jobs:
  lint:
    name: Lint (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    using: "composite"
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runs_db: true
          - os: windows-latest
            runs_db: false
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}-${{ hashFiles('.github/actions/install-env/action.yml') }}-${{ steps.setup-python.outputs.python-version }}

      - name: Load cached .local
        id: cached-dotlocal
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/actions/install-env/action.yml') }}-${{ steps.setup-python.outputs.python-version }}

      - name: Install Python poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          virtualenvs-path: .venv
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run format check
        run: |
          black --check .
          isort --check-only .
      - name: Lint
        run: |
          ruff check src tests
          ruff format src tests
      - name: Typecheck
        run: |
          mypy --install-types
          mypy src tests

  test:
    runs-on: ${{ matrix.os }}
    needs: [lint]
    strategy:
      matrix:
        python-version: [3.13]
        include:
          - os: ubuntu-latest
            runs_db: true
          - os: windows-latest
            runs_db: false
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Run unit tests with coverage
        uses: ./.github/actions/install-env
        run: |
          poetry run pytest --maxfail=1 --disable-warnings --cov=src --cov-report=html
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pytest-reports-${{ matrix.python-version }}
          path: reports/

  # integration:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   services:
  #     selenium:
  #       image: selenium/standalone-chrome:latest
  #       options: >-
  #         --shm-size=1g
  #       ports:
  #         - 4444:4444
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.13
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pytest selenium undetected-chromedriver
  #     - name: Wait for selenium
  #       run: |
  #         for i in {1..30}; do
  #           if curl -sS http://localhost:4444/status | grep -q READY; then
  #             echo "Selenium ready"; break;
  #           fi
  #           sleep 1
  #         done
  #     - name: Run integration tests
  #       env:
  #         SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub
  #       run: |
  #         python runner.py
  #     - name: Upload integration report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: integration-report
  #         path: reports/integration.xml

  # build-and-push:
  #   runs-on: ubuntu-latest
  #   needs: integration
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Log in to registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ secrets.GITHUB_ACTOR }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build Docker image
  #       run: |
  #         IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ github.sha }}
  #         docker build -t $IMAGE_TAG .
  #         docker tag $IMAGE_TAG ${{ env.IMAGE_NAME }}:latest
  #     - name: Push Docker image
  #       run: |
  #         docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
  #         docker push ${{ env.IMAGE_NAME }}:latest
  #     - name: Publish artifact (image tag)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: image-info
  #         path: |
  #           ./  # you can write a file with image tag info if needed

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Setup kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: '1.27.3'
  #     - name: Configure kubeconfig
  #       run: |
  #         echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
  #         export KUBECONFIG=$PWD/kubeconfig.yaml
  #     - name: Deploy to Kubernetes (example)
  #       run: |
  #         # You should replace the following with your helm/kubectl commands:
  #         kubectl set image deployment/news-scraper news-scraper=${{ env.IMAGE_NAME }}:${{ github.sha }} --record
  #         kubectl rollout status deployment/news-scraper
  #     - name: Notify Slack on success
  #       if: success()
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment successful: '${{ env.IMAGE_NAME }}:${{ github.sha }}'"}' ${{ secrets.SLACK_WEBHOOK }}
